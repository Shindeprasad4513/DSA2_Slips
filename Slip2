 /* Slip-2
 Q 1)  Write a C program for the implementation of Topological sorting.                                    [10 Marks] 
 
 #include<stdio.h> 
 #define MAX 10
 struct stack 
 {
 	int a[MAX];
 	int top;
 }s;
 void init()
 {
 	s.top=-1;
 }
 int isempty()
 {
 	return s.top==-1;
 }
 int isfull()
 {
 	s.top==MAX-1;
 }
 int push(int key)
 {
 	return s.a[++s.top]=key;
 }
 int pop()
 {
 	return s.a[s.top--];
 }
 void topo(int a[10][10],int n)
 {
 	int i,j,visit[20]={0},ind[20]={0};
 	for(i=0;i<n;i++)
 	{
 	for(j=0;j<n;j++)
 	 { 
	   ind[i]=ind[i]+a[j][i];
	 }
	 }
	 
	 while(1)
	 {
	 	for(i=0;i<n;i++)
	 	{
	 		if(ind[i]==0 || visit[i]==0)
	 		{
	             push(i);
				 visit[i]=1;
				 printf("V%d\t",i+1);			
			 }
		 }
		 if(isempty())
		 {
		 	
		 }
		 int v=pop();
		 for(j=0;j<n;j++)
		 {
		 	ind[j]=ind[j]-1;
		 }
	 }
 }
 int main()
 {
 	int a[20][20],i,j,n;
 	printf("Entet no of nodes:");
 	scanf("%d",&n);
 	for(i=0;i<n;i++)
 	{
 		for(j=0;j<n;j++)
	    {
	    	a[i][j]=0;
	    	if(i!=j)
	    	{
	    		printf("Enter edge c(%d,%d):",i+1,j+1);
	    		scanf("%d",&a[i][j]);
			}
		}
	 }
	 printf("\nTopological sort:-\n");
	 topo(a,n);
 }
 
Q 2) Implement a Binary search tree (BST) library (btree.h) with operations â€“ create, search, inorder. Write a 
menu driven program that performs the above operations
*/
#include<stdio.h>
struct node 
{
	int data;
	struct node *left,*right;
}*root;
struct node *create(struct node *root)
{
	int i,n;
	struct node *temp,*newnode,*parent;
	printf("Enter limit:");
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
		newnode=(struct node *)malloc(sizeof(struct node));
		printf("Enter data:");
		scanf("%d",&newnode->data);
	    newnode->left=newnode->right=NULL;
	    if(root==NULL)
	    {
	    	root=newnode;
	    	continue;
		}
		temp=root;
		while(temp!=NULL)
		{
			parent=temp;
			if(newnode->data<temp->data)
			{
				temp=temp->left;
			}
			else
			{
				temp=temp->right;
			}
		}
		if(newnode->data<parent->data)
		{
			parent->left=newnode;
		}
		else
		{
			parent->right=newnode;
		}
	}
	return root;
}
struct node *search(struct node *root,int num)
{
	struct node *temp=root;
   while(temp!=NULL)
   {
       if(num==temp->data)
	   {
	   	   return temp;
	   }	
	   if(num<temp->data)
	   {
	   	temp=temp->left;
	   }
	   else
	   {
	   	temp=temp->right;
	   }
   }
      return NULL;
   
}
void preorder(struct node *root)
{
	struct node *temp=root;
	if(temp!=NULL)
    {
    	printf("%d\t",temp->data);
    	preorder(temp->left);
    	preorder(temp->right);
	}
}
void main()
{
   int ch,num,res;
   struct node *root=NULL;
   do
   {
   	 printf("\nMENU\n2.Create\n2.Search\n3.Display Preorder\n4.Exir\n");
   	 printf("Enter Your Choice:");
   	 scanf("%d",&ch);
   	 switch(ch)
     {
     	case 1 : root=create(root); break;
     	case 2 : printf("Enter key to Search:");
		          scanf("%d",&num);
				  res=search(root,num); 
				  if(res)
				     printf("key is found");
				  else
				     printf("Key not found");   
				  break;
	    case 3 : preorder(root); break;
		case 4 : printf("Exit"); break;			   
	 }
	}while(ch<4);	
}
