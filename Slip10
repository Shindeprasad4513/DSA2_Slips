/*Slip-10
Q 1) Write a C program for the implementation of Topological sorting                                          [10 Marks]  
 
  #include<stdio.h> 
 #define MAX 10
 struct stack 
 {
 	int a[MAX];
 	int top;
 }s;
 void init()
 {
 	s.top=-1;
 }
 int isempty()
 {
 	return s.top==-1;
 }
 int isfull()
 {
 	s.top==MAX-1;
 }
 int push(int key)
 {
 	return s.a[++s.top]=key;
 }
 int pop()
 {
 	return s.a[s.top--];
 }
 void topo(int a[10][10],int n)
 {
 	int i,j,visit[20]={0},ind[20]={0};
 	for(i=0;i<n;i++)
 	{
 	for(j=0;j<n;j++)
 	 { 
	   ind[i]=ind[i]+a[j][i];
	 }
	 }
	 
	 while(1)
	 {
	 	for(i=0;i<n;i++)
	 	{
	 		if(ind[i]==0 || visit[i]==0)
	 		{
	             push(i);
				 visit[i]=1;
				 printf("V%d\t",i+1);			
			 }
		 }
		 if(isempty())
		 {
		 	
		 }
		 int v=pop();
		 for(j=0;j<n;j++)
		 {
		 	ind[j]=ind[j]-1;
		 }
	 }
 }
 int main()
 {
 	int a[20][20],i,j,n;
 	printf("Entet no of nodes:");
 	scanf("%d",&n);
 	for(i=0;i<n;i++)
 	{
 		for(j=0;j<n;j++)
	    {
	    	a[i][j]=0;
	    	if(i!=j)
	    	{
	    		printf("Enter edge c(%d,%d):",i+1,j+1);
	    		scanf("%d",&a[i][j]);
			}
		}
	 }
	 printf("\nTopological sort:-\n");
	 topo(a,n);
 }

 
Q 2) Write a C program that accepts the vertices and edges of a graph. Create adjacency list and display the     
adjacency list. 
*/
#include<stdio.h>
#include<stdlib.h>
 struct node
 {
    int data;
    struct node *next;
 };
 struct node *head[20];
  void create(int a[20][20],int n)
  {
  	int i,j;
  	struct node *temp,*newnode;
  	for(i=0;i<n;i++)
  	{
  		head[i]=NULL;
  		for(j=0;j<n;j++)
  		{
  	      if(a[i][j]==1)
			{
			  
			   newnode=(struct node *)malloc(sizeof(struct node));	
			   newnode->data=j+1;
			   newnode->next=NULL;
			   if(head[i]==NULL)
			   {
			   	head[i]=temp=newnode;
			   }
              else
			   {
				   temp->next=newnode;
				   temp=newnode;
		       }
			}
					
	    }
	  }
  }
  void disp(int n)
  {
  	int i;
  	struct node *temp;
  	printf("\nadjecency List\n");
  	for(i=0;i<n;i++)
    {
    	printf("v%d-->\t",i+1);
    	temp=head[i];
		while(temp!=NULL)
    	{
    		printf("%d-->\t",temp->data);
		    temp=temp->next;
		}
		printf("NULL\n");
	}
  }
  int main()
  {
    int i,j,a[20][20],n;
    printf("Enter no of nodes:");
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
    	for(j=0;j<n;j++)
    	{
    		a[i][j]=0;
    		if(i!=j)
    		{
    			printf("Enter edge v(%d,%d):",i+1,j+1);
    			scanf("%d",&a[i][j]);
			}
		}
	}
	printf("\nAdjecency Matrix\n");
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			printf("%d\t",a[i][j]);
		}
		printf("\n");
	}
   create(a,n);
   disp(n);
  }
