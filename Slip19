/*Slip-19
 
Q 1) Write a C program that accepts the vertices and edges of a graph and store it as an adjacency matrix. 
Implement function to traverse the graph using Depth First Search (DFS) traversal.                                               
 
  
  #include<stdio.h>
  int i,j;
  void dfs(int a[20][20],int n,int v)
  {
   	static int visit[20]={0};
	  visit[v]=1;
	  printf("V%d\t",v+1);
	  
	  for(j=0;j<n;j++)
  	{
  	   if(a[v][j]==1 && visit[j]==0)
		 {
		    visit[j]=1;
			dfs(a,n,j); 	
	     }	
	}
  }
  int main()
  {
    int i,j,a[20][20],n;
    printf("Enter no of nodes:");
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
    	for(j=0;j<n;j++)
    	{
    		a[i][j]=0;
    		if(i!=j)
    		{
    			printf("Enter edge v(%d,%d):",i+1,j+1);
    			scanf("%d",&a[i][j]);
			}
		}
	}
	printf("\nAdjecency Matrix\n");
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			printf("%d\t",a[i][j]);
		}
		printf("\n");
	}
	
	printf("DFS\n");
   dfs(a,n,0);
  } 

 
 */ 
 /*
Q 2) Write a C program that accepts the vertices and edges of a graph. Create adjacency list and display the 
adjacency list.
*/

#include<stdio.h>
#include<stdlib.h>
 struct node
 {
    int data;
    struct node *next;
 };
 struct node *head[20];
  void create(int a[20][20],int n)
  {
  	int i,j;
  	struct node *temp,*newnode;
  	for(i=0;i<n;i++)
  	{
  		head[i]=NULL;
  		for(j=0;j<n;j++)
  		{
  	      if(a[i][j]==1)
			{
			  
			   newnode=(struct node *)malloc(sizeof(struct node));	
			   newnode->data=j+1;
			   newnode->next=NULL;
			   if(head[i]==NULL)
			   {
			   	head[i]=temp=newnode;
			   }
              else
			   {
				   temp->next=newnode;
				   temp=newnode;
		       }
			}
					
	    }
	  }
  }
  void disp(int n)
  {
  	int i;
  	struct node *temp;
  	printf("\nadjecency List\n");
  	for(i=0;i<n;i++)
    {
    	printf("v%d-->\t",i+1);
    	temp=head[i];
		while(temp!=NULL)
    	{
    		printf("%d-->\t",temp->data);
		    temp=temp->next;
		}
		printf("NULL\n");
	}
  }
  int main()
  {
    int i,j,a[20][20],n;
    printf("Enter no of nodes:");
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
    	for(j=0;j<n;j++)
    	{
    		a[i][j]=0;
    		if(i!=j)
    		{
    			printf("Enter edge v(%d,%d):",i+1,j+1);
    			scanf("%d",&a[i][j]);
			}
		}
	}
	printf("\nAdjecency Matrix\n");
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			printf("%d\t",a[i][j]);
		}
		printf("\n");
	}
   create(a,n);
   disp(n);
  }
  
