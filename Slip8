/* Slip-8
Q 1)  Write a C program that accepts the vertices and edges of a graph and store it as an adjacency 
matrix.Implement function to traverse the graph using Depth First Search (DFS) traversal.           
       
    
     #include<stdio.h>
   int i,j;
   void dfs(int a[20][20],int n,int v)
   {
   	static int visit[20]={0};
	visit[v]=1;
	printf("v%d\t",v+1);
   	  for(j=0;j<n;j++)
		 {
		   	if(a[v][j]==1 && visit[j]==0)
			 {
			 	visit[j]=1;
	            dfs(a,n,j);
			 }
		}	
   }
  int main()
  {
    int i,j,a[20][20],n;
    printf("Enter no of nodes:");
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
    	for(j=0;j<n;j++)
    	{
    		a[i][j]=0;
    		if(i!=j)
    		{
    			printf("Enter edge v(%d,%d):",i+1,j+1);
    			scanf("%d",&a[i][j]);
			}
		}
	}
	printf("\nAdjecency Matrix\n");
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			printf("%d\t",a[i][j]);
		}
		printf("\n");
	}
	printf("\nDFS\n");
	dfs(a,n,0);
  }
	
    Q 2) Write a C program for the Implementation of Kruskalâ€™s Minimum spanning tree algorithm. 
    */
    #include<stdio.h>
    int i,j,parent[20];
    int find(int i)
    {
    	while(parent[i])
    	{
    	   i=parent[i];	
		}
		return i;
	}
	int uni(int i,int j)
	{
		if(i!=j)
		{
			parent[j]=i;
		    return 1;
		}
		return 0;
	}
	void kruskal(int a[20][20],int n)
	{
		int i,j,u,v,e=0,min,mincost=0,b,c;
		while(e<n-1)
		{
			min=999;
			for(i=0,min=999;i<n;i++)
			{
				for(j=0;j<n;j++)
				{
					if(a[i][j]<min)
					{
						min=a[i][j];
						b=u=i;
					    c=v=j;
					}
				}
			}
			u=find(u);
			v=find(v);
			if(uni(u,v))
             {
               printf("\nEdge %d:%d-%d:Cost-%d",e+1,b+1,c+1,min);	
			   mincost+=min;
			 }			
			 a[b][c]=a[c][b]=999;
		   e++;
		}
		printf("\nMincost=%d",mincost);
	}
	int main()
    {
    	
    int i,j,a[20][20],n;
    printf("Enter no of nodes:");
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
    	for(j=0;j<n;j++)
    	{
    		 	printf("Enter edge v(%d,%d):",i+1,j+1);
    			scanf("%d",&a[i][j]);
                if(a[i][j]==0)
		        {
		        	a[i][j]=999;
				}
		}
	}
     kruskal(a,n);
	}
