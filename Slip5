/* Slip-5
Q 1) )   Write C program to implement hash table using array insert and display In case of collision apply  

    #include<stdio.h>
    int hf(int key,int i)
    {
    	return (key%10+i)%10;
	}
	void insert(int a[10],int key)
	{
		int i,ind;
		for(i=0;i<10;i++)
		{
			ind=hf(key,i);
			if(a[ind]==-1)
			{
				a[ind]=key;
				return;
			}
		}
		printf("%d is not found",key);
	}
	void disp(int a[10])
	{
		int i;
		for(i=0;i<10;i++)
		{
			printf("\n%d[%d]",i,a[i]);
		}
	
	}
    int main()
    {
    	int a[10],i,ch,key;
    	for(i=0;i<10;i++)
	    {
	    	a[i]=-1;
		}
        do
		{
			printf("\nMENU\n1.Insert\n2.Disp\n3.Exit\nEnter your choice:");
			scanf("%d",&ch);
			switch(ch)
			{
				case 1 : printf("Enter key to insert:");
				         scanf("%d",&key);
				         insert(a,key);
				         break;
				case 2 : disp(a);
				         break;
			    case 3  : printf("Exit"); break;			          
						 
			}
	    }while(ch<3);		
	}

Q 2) Write a program to sort n randomly generated elements using Heapsort method. 
 */
 #include<stdio.h>
 #include<stdlib.h>
  int i,n,a[10];
  void accept()
  {
  	for(i=0;i<n;i++)
  	{
  	    a[i]=rand()%100;	
	  //scanf("%d",&a[i]);
	}
  }
  void disp()
  {
  	for(i=0;i<n;i++)
  	{
  	   printf("%d\t",a[i]);	
	}
  }
  void heapify(int a[],int top,int last)
  {
  	int j,p=a[top],temp;
  	j=2*top+1;
	  if(a[j]<a[j+1] && j<last)
	  {
	     j=j+1;
	  }
	  if(p<a[j] && j<=last)
	  {
	  	temp=a[top];
	  	a[top]=a[j];
	  	a[j]=temp;
	    heapify(a,j,last);
	  }
  }
  void buildheap(int a[],int n)
  {
  	int i;
  	for(i=n/2-1;i>=0;i--)
  	{
  	   heapify(a,i,n-1);	
	}
  }
  void swap(int a[],int n)
  {
  	int temp,top=0,last;
  	buildheap(a,n);
  	printf("\nInitial heap=");
  	disp();
  	for(last=n-1;last>=1;last--)
  	{
  	   temp=a[top];
		 a[top]=a[last];
		 a[last]=temp;
		 printf("\nAfter Iteration-%d:",n-last);
		 disp();
		 heapify(a,top,last-1);	
	}
  }
  int main()
  {
       	printf("Enter Limit:");
       	scanf("%d",&n);
       	accept();
       	swap(a,n);
         
  }
