/* Slip-16
Q 1) Write a C program for the implementation of Floyd Warshallâ€™s algorithm for finding all pairs shortest path using 
adjacency cost matrix.                                                                                                                                                  

  #include<stdio.h>
 int i,j,k,n;
 void print(int a[20][20])
 {
 	for(i=0;i<n;i++)
 	{
 		for(j=0;j<n;j++)
 		{
 			if(a[i][j]==999)
 			{
 				printf("%4s","INF");
			 }
			 else
			 {
			 	printf("%4d",a[i][j]);
			 }
		 }
		 printf("\n");
	 }
 }
 void floyd(int a[20][20])
 {
 	for(k=0;k<n;k++)
    {
    	for(i=0;i<n;i++)
    	{
    		for(j=0;j<n;j++)
    		{
    			if(a[i][k]+a[k][j]<a[i][j])
                 {
                 	a[i][j]=a[i][k]+a[k][j];
				 }
			}
		}
       printf("\nd(%d):\n",k+1);
	   print(a);
	}	
 }
  int main()
  {
    int i,j,a[20][20];
    printf("Enter no of nodes:");
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
    	for(j=0;j<n;j++)
    	{
     			scanf("%d",&a[i][j]);
     	}
	}
	floyd(a);
 }
 
  Q 2) Write a program to sort n randomly generated elements using Heapsort method.        
*/
#include<stdio.h>
 #include<stdlib.h>
  int i,n,a[10];
  void accept()
  {
  	for(i=0;i<n;i++)
  	{
  	    a[i]=rand()%100;	
	  //scanf("%d",&a[i]);
	}
  }
  void disp()
  {
  	for(i=0;i<n;i++)
  	{
  	   printf("%d\t",a[i]);	
	}
  }
  void heapify(int a[],int top,int last)
  {
  	int j,p=a[top],temp;
  	j=2*top+1;
	  if(a[j]<a[j+1] && j<last)
	  {
	     j=j+1;
	  }
	  if(p<a[j] && j<=last)
	  {
	  	temp=a[top];
	  	a[top]=a[j];
	  	a[j]=temp;
	    heapify(a,j,last);
	  }
  }
  void buildheap(int a[],int n)
  {
  	int i;
  	for(i=n/2-1;i>=0;i--)
  	{
  	   heapify(a,i,n-1);	
	}
  }
  void swap(int a[],int n)
  {
  	int temp,top=0,last;
  	buildheap(a,n);
  	printf("\nInitial heap=");
  	disp();
  	for(last=n-1;last>=1;last--)
  	{
  	   temp=a[top];
		 a[top]=a[last];
		 a[last]=temp;
		 printf("\nAfter Iteration-%d:",n-last);
		 disp();
		 heapify(a,top,last-1);	
	}
  }
  int main()
  {
       	printf("Enter Limit:");
       	scanf("%d",&n);
       	accept();
       	swap(a,n);
         
  }
     
