/*Slip -7
 Q 1) Write a C program for the implementation of Floyd Warshallâ€™s algorithm for finding all pairs shortest 
path using adjacency cost matrix.                                                                                    [10 Marks] 
 
 #include<stdio.h>
 int i,j,k,n;
 void print(int a[20][20])
 {
 	for(i=0;i<n;i++)
 	{
 		for(j=0;j<n;j++)
 		{
 			if(a[i][j]==999)
 			{
 				printf("%4s","INF");
			 }
			 else
			 {
			 	printf("%4d",a[i][j]);
			 }
		 }
		 printf("\n");
	 }
 }
 void floyd(int a[20][20])
 {
 	for(k=0;k<n;k++)
    {
    	for(i=0;i<n;i++)
    	{
    		for(j=0;j<n;j++)
    		{
    			if(a[i][k]+a[k][j]<a[i][j])
                 {
                 	a[i][j]=a[i][k]+a[k][j];
				 }
			}
		}
       printf("\nd(%d):\n",k+1);
	   print(a);
	}	
 }
  int main()
  {
    int i,j,a[20][20];
    printf("Enter no of nodes:");
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
    	for(j=0;j<n;j++)
    	{
     			scanf("%d",&a[i][j]);
     	}
	}
	floyd(a);
 }
 

  Q 2) Write a C program that accepts the vertices and edges of a graph and store it as an adjacency matrix. 
Implement function to traverse the graph using Breadth First Search (BFS) traversal 
*/
 #include<stdio.h>
 #define MAX 20
  struct que
  {
  	int a[MAX];
  	int front,rear;
  }q;
  void init()
  {
  	q.front=q.rear=-1;
  }
  int isempty()
  {
  	return q.front==q.rear;
  }
  int isfull()
  {
  	return q.rear==MAX-1;
  }
  int add(int key)
  {
  	return q.a[++q.rear]=key;
  }
  int rm()
  {
  	return q.a[++q.front];
  }
  void bfs(int a[10][10],int n)
  {
  	init();
  	int visit[20]={0},i,j;  	
    int v=0;
	add(v);
  	visit[v]=1;
  	while(!isempty())
  	{
  		i=rm();
  		printf("V%d\t",i+1);
	    for(j=0;j<n;j++)
		{
		    if(a[i][j]==1 && visit[j]==0)
			{
				add(j);
				visit[j]=1;
			}	
		}  
	}
  	
  }
  int main()
  {
    int i,j,a[20][20],n;
    printf("Enter no of nodes:");
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
    	for(j=0;j<n;j++)
    	{
    		a[i][j]=0;
    		if(i!=j)
    		{
    			printf("Enter edge v(%d,%d):",i+1,j+1);
    			scanf("%d",&a[i][j]);
			}
		}
	}
	printf("\nAdjecency Matrix\n");
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			printf("%d\t",a[i][j]);
		}
		printf("\n");
	}
   bfs(a,n);
  }

