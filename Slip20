/*Slip-20
Q 1) Write a C program of implementation of topological sort. 
  #include<stdio.h> 
 #define MAX 10
 struct stack 
 {
 	int a[MAX];
 	int top;
 }s;
 void init()
 {
 	s.top=-1;
 }
 int isempty()
 {
 	return s.top==-1;
 }
 int isfull()
 {
 	s.top==MAX-1;
 }
 int push(int key)
 {
 	return s.a[++s.top]=key;
 }
 int pop()
 {
 	return s.a[s.top--];
 }
 void topo(int a[10][10],int n)
 {
 	int i,j,visit[20]={0},ind[20]={0};
 	for(i=0;i<n;i++)
 	{
 	for(j=0;j<n;j++)
 	 { 
	   ind[i]=ind[i]+a[j][i];
	 }
	 }
	 
	 while(1)
	 {
	 	for(i=0;i<n;i++)
	 	{
	 		if(ind[i]==0 || visit[i]==0)
	 		{
	             push(i);
				 visit[i]=1;
				 printf("V%d\t",i+1);			
			 }
		 }
		 if(isempty())
		 {
		 	
		 }
		 int v=pop();
		 for(j=0;j<n;j++)
		 {
		 	ind[j]=ind[j]-1;
		 }
	 }
 }
 int main()
 {
 	int a[20][20],i,j,n;
 	printf("Entet no of nodes:");
 	scanf("%d",&n);
 	for(i=0;i<n;i++)
 	{
 		for(j=0;j<n;j++)
	    {
	    	a[i][j]=0;
	    	if(i!=
	    	{
	    		printf("Enter edge c(%d,%d):",i+1,j+1);
	    		scanf("%d",&a[i][j]);
			}
		}
	 }
	 printf("\nTopological sort:-\n");
	 topo(a,n);
 }           
			
*/
/*
Q 2) Write a program which uses binary search tree library and count the total nodes and total leaf nodes in     
the tree.int countLeaf(T) â€“ returns the total number of leaf nodes from BST
*/

#include<stdio.h>
#include<stdlib.h>
struct node
{
	int data;
	struct node *left,*right;
}*root;

struct node *create(struct node *root)
{
	struct node *temp,*parent,*newnode;
	int i,n;
	printf("Enter Limit:");
	scanf("%d",&n);
	for(i=0;i<n;i++)
    {
    	newnode=(struct node *)malloc(sizeof(struct node));
    	printf("Enter Data:");
    	scanf("%d",&newnode->data);
    	newnode->left=newnode->right=NULL;
    	if(root==NULL)
        {
        	root=newnode;
        	continue;
		}
		temp=root;
		while(temp!=NULL)
		{
			parent=temp;
			if(newnode->data<temp->data)
			{
				temp=temp->left;
			}
			else
			{
				temp=temp->right;
			}
		}
		if(newnode->data<parent->data)
		{
			parent->left=newnode;
		}
		else
		{
			parent->right=newnode;
		}
	}
  return root;	
}
int countnode(struct node *root)
{
	struct node *temp=root;
	static int cnt=0;
	if(temp!=NULL)
	{
		cnt++;
		countnode(temp->left);
		countnode(temp->right);
	}
  return cnt;
}

int countleaf(struct node *root)
{
	struct node *temp=root;
	static int cnt=0;
	if(temp!=NULL)
	{
		if(temp->left==NULL && temp->right==NULL)
		{
			cnt++;
		}
		countleaf(temp->left);
		countleaf(temp->right);
	}
  return cnt;
}
void main()
{
	struct node *root=NULL;
	root=create(root);
	printf("Total Nodes=%d\n",countnode(root));
	printf("Leaf Nodes=%d\n",countleaf(root));
}
